# useCallBack()

모든 함수는 컴포넌트가 리렌더링 될 때마다 새로 만들어진다.
함수를 재 선언 하는 것은 메모리도, CPU도 리소스를 많이 차지하지는 않아 부하가 생길일은 없지만,
한번 만든 함수를 필요할 때만 새로 만들고 재사용하기 위해서 사용된다.

**Usage
      function MyComponent() {
         const handleClick = useCallback(() => {
            // ...
         }, [])
      }
   ex)
      const handleClick = React.useCallback(
         () => console.log('current count :' + count),
      []);

   출력 결과

   handleClick() // 실제 count 값: 0, 출력 결과: current count :0
   setCount(count + 1) // 실제 count 값: 1
   handleClick() // 실제 count 값: 1, 출력 결과: current count :0

   두번째 호출에서 실제 count 값이 1증가해서 변경되었음에도 최초값인 0을 출력합니다. 
   useCallback 내부에서 count값을 의존하지만, 이를 제대로 인지하지 못하고 이전 값을 출력하는 것입니다.

   따라서 다음과 같이 useCallback의 두번째 인자 배열에 의존하는 상태값을 명시해야 제대로 동작합니다.

      const handleClick = React.useCallback(
         () => console.log('current count :' + count),
      [count]) // 의존하는 상태 명시

   출력 결과

   handleClick() // 실제 count 값: 0, 출력 결과: current count :0
   setCount(count + 1) // 실제 count 값: 1
   handleClick() // 실제 count 값: 1, 출력 결과: current count :1

   이처럼 useCallback 함수 내부에서 의존하는 상태값이 있다면, 반드시 두번째 인자 배열에 명시해야합니다.

**언제 사용되어야 하는가 ?
   복잡한 로직의 함수를 재랜더링없이 사용하고자 할때 사용하도록 하자.
   때론 간단한 로직의 경우 재랜더링을 위해서 useCallback을 사용하려고 할때
   deps함수에 의해서 더 많은 비용이 들기도 한다고 한다.