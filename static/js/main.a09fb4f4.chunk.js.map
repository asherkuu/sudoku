{"version":3,"sources":["reducers/actions.ts","utils/fill-grid/index.ts","utils/shuffle/index.ts","utils/is-in/row/index.ts","utils/is-in/col/index.ts","utils/is-in/square/index.ts","utils/identify-square/index.ts","utils/check-gird/index.ts","utils/create-full-grid/index.ts","utils/get-random-index/index.ts","utils/copy-grid/index.ts","global/index.ts","utils/solve-grid/index.ts","utils/remove-number/index.ts","utils/compare-array/index.ts","reducers/reducer.ts","reducers/index.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/styles/index.ts","components/grid/index.tsx","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/styles/content/index.ts","components/styles/title/index.ts","components/styles/card/index.ts","components/styles/button/index.ts","components/new-botton/index.tsx","core/service-worker/index.ts","core/configure-store/index.ts","styles/global.ts","index.tsx","styles/theme.ts","reducers/types.ts"],"names":["createGrid","type","types","select","coords","fillBlock","value","numbers","fillGrid","grid","row","col","i","Math","floor","shuffle","isInRow","isInCol","square","identifySquare","isInSquare","checkGrid","array","length","j","random","includes","identifyWorkingSquare","x","push","createFullGrid","getRandomIndex","copyGrid","gridCopy","r","c","counter","solveGrid","global","removeNumbers","attempts","backup","compareArrays","arr1","arr2","Array","isArray","len","initialState","reducer","state","action","solvedGrid","challengeGrid","workingGrid","selectedBlock","toast","error","alert","Container","styled","div","theme","active","puzzle","css","colors","blue","white","black","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","useEffect","fill","n","console","log","useMousetrap","Children","toArray","map","_","NumberButton","Button","Numbers","Content","Title","h1","Card","button","NewButton","createNewGrid","window","confirm","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","persistConfig","key","storage","persistedReducer","persistReducer","configureStore","store","createStore","devToolsEnhancer","persistor","persistStore","createGlobalStyle","background","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","CRETAE_GRID","SELECT_BLOCK","FILL_BLOCK"],"mappings":"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","file":"static/js/main.a09fb4f4.chunk.js","sourcesContent":["import { BLOCK_COORDS, NUMBERS } from './../typings';\nimport { Action, AnyAction } from 'redux'\nimport * as types from './types'\n\nexport const createGrid = (): Action => ({\n   type: types.CRETAE_GRID \n})\n\nexport const select = (coords: BLOCK_COORDS) : AnyAction => ({ \n   type: types.SELECT_BLOCK,\n   coords\n})\n\nexport const fillBlock = (value: NUMBERS, coords : BLOCK_COORDS): AnyAction =>({\n   type: types.FILL_BLOCK, \n   coords, \n   value\n})","import { GRID, NUMBERS } from '../../typings'\nimport { isInCol, isInRow, shuffle, identifySquare, isInSquare, checkGrid } from 'utils'\n\n/*\n  const gridExam = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ]\n*/\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n/**\n * A backtracking/recursive function to check all the possible combinations of numbers a solution is found\n * @param grid 9X9 Sudoku Grid\n */\nfunction fillGrid(grid: GRID) {\n  let row = 0;\n  let col = 0;\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9);\n    col = i % 9;\n\n    if (grid[row][col] === 0) {\n      shuffle(numbers);\n      \n      for(let value of numbers) {\n        if(!isInRow({ grid, row, value }))\n          if(!isInCol({ col, grid, value})) {\n            const square = identifySquare({ col, grid, row });\n\n            if(!isInSquare({ square, value })) {\n              grid[row][col] = value;\n              \n              if(checkGrid(grid)) return true;\n              else if (fillGrid(grid)) return true;\n            }\n          } \n      }\n      break;\n    }\n  }\n\n  grid[row][col] = 0\n}\n\nexport default fillGrid","/**\n * An array shuffling using the Fisher-Yates shuffle algorithm\n * @param array An array that you want shuffled\n */\nexport default function shuffle(array: any[]) {\n   for(let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random()* (i + 1))\n      ;[array[i], array[j]] = [array[j], array[i]]\n   }\n}","import { GRID, NUMBERS } from './../../../typings/index';\n\ninterface IInput {\n   grid: GRID\n   row: number\n   value: NUMBERS \n}\n\n/**\n * A function that returns true if the value is already being used in the current grid row\n * @param param0 input Object with 9X9 Sudoku Grid, row index and value\n */\nfunction isInRow({ grid, row, value }: IInput): boolean {\n   return grid[row].includes(value);\n}\n\nexport default isInRow","import { GRID, NUMBERS } from './../../../typings/';\n\ninterface IInput {\n   col: number\n   grid: GRID\n   value: NUMBERS\n}\n\n/**\n * A function that return if the value is already being used in the currnet grid column\n * @param input Object with 9X9 Sudoku Gird, col index and value\n */\nfunction isInCol({ col, grid, value} :IInput): boolean {\n   for(let i = 0; i < 9; i++) if(value === grid[i][col]) return true;\n   return false;\n}\n\nexport default isInCol","import { NUMBERS, SQUARE } from '../../../typings';\n\ninterface IInput {\n   square: SQUARE\n   value: NUMBERS\n}\n\n/**\n * A function that return true if the value is already being used in the current grid sqaure\n * @param param0 Object with 3X3 Sudoku Gird, sqaure and value\n */\nfunction isInSquare({ square, value }: IInput): boolean {\n   return [ ...square[0], ...square[1], ...square[2] ].includes(value);\n}\n\nexport default isInSquare","import { GRID, SQUARE } from './../../typings/';\n\ninterface IInput {\n   grid: GRID\n   row: number\n   col: number\n}\nfunction identifyWorkingSquare({ col, grid, row }: IInput): SQUARE {\n   const square = []\n   if(row < 3) {\n      if(col < 3)\n         for(let x = 0; x < 3; x++) \n            square.push([grid[x][0], grid[x][1], grid[x][2]])\n      else if(col < 6)\n         for(let x = 0; x < 3; x++) \n            square.push([grid[x][3], grid[x][4], grid[x][5]])\n      else \n         for(let x = 0; x < 3; x++) \n            square.push([grid[x][6], grid[x][7], grid[x][8]])\n   } else if(row < 6) {\n      if(col < 3)\n         for(let x = 3; x < 6; x++) \n            square.push([grid[x][0], grid[x][1], grid[x][2]])\n      else if(col < 6)\n         for(let x = 3; x < 6; x++) \n            square.push([grid[x][3], grid[x][4], grid[x][5]])\n      else \n         for(let x = 3; x < 6; x++) \n            square.push([grid[x][6], grid[x][7], grid[x][8]])\n   } else {\n      if(col < 3)\n         for(let x = 6; x < 9; x++) \n            square.push([grid[x][0], grid[x][1], grid[x][2]])\n      else if(col < 6)\n         for(let x = 6; x < 9; x++) \n            square.push([grid[x][3], grid[x][4], grid[x][5]])\n      else \n         for(let x = 6; x < 9; x++) \n            square.push([grid[x][6], grid[x][7], grid[x][8]])\n   }\n\n   return square as SQUARE\n}\n\nexport default identifyWorkingSquare","import { GRID } from '../../typings'\n\n/**\n * A function to check if the grid is full\n * @param grid A 9X9 Sudoku Grid\n */\nfunction checkGrid(grid: GRID): boolean {\n   for (let i = 0; i < 9; i++)\n      for (let j = 0; j < 9; j++)\n         if(grid[i][j] === 0) return false;\n      return true;\n}\n\nexport default checkGrid","import { GRID } from 'typings'\nimport { fillGrid } from 'utils'\n\n/**\n * A function to creat a full valid sudoku grid\n */\nfunction createFullGrid(): GRID {\n   const grid: GRID = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n\n    fillGrid(grid);\n    return grid\n}\n\nexport default createFullGrid","/**\n * Return a random grid index in the 0 == 8 range\n */\nexport default function getRandomIndex() {\n   return Math.floor(Math.random() * Math.floor(9))\n}\n\n","import { GRID, INDEX } from 'typings'\n\nexport default function copyGrid(grid: GRID): GRID {\n  const gridCopy: GRID = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ];\n\n  for(let r: INDEX = 0; r < 9; r++) \n    for (let c:INDEX = 0; c < 9; c++) gridCopy[r][c] = grid[r][c];\n\n  return gridCopy;\n}\n","export default {\n   counter: 0,\n}","import global from 'global'\nimport { GRID, NUMBERS } from 'typings'\nimport { checkGrid, identifySquare, isInCol, isInRow, isInSquare } from 'utils'\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n/**\n * A backtracking/recursive function to check all possible combinatinos of numbers until a solution found\n * @param grid A 9X89 (array consisting of values from 0-9)\n */\nexport default function solveGrid(grid: GRID) {\n  let row = 0\n  let col = 0\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9)\n    col = i % 9\n\n    if (grid[row][col] === 0) {\n      for (let value of numbers) \n        if (!isInRow({ grid, row, value })) {\n          if (!isInCol({ col, grid, value })) {\n            const square = identifySquare({ col, grid, row })\n\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value\n\n              if (checkGrid(grid)) {\n                global.counter++\n                break\n              } else if (solveGrid(grid)) return true\n            }\n          }\n        }\n      break;\n    }\n  }\n\n  grid[row][col] = 0\n}\n","import global from 'global'\nimport { GRID } from 'typings'\nimport { getRandomIndex, copyGrid, solveGrid } from 'utils'\n\n\n/**\n * Removes numbers from a full grid to create a Sudoku Puzzle\n * @param grid 9X9 Sudoku Grid\n * @param attempts number of attempts to solve (higher means more defficult) default - 5\n */\nexport default function removeNumbers(grid: GRID, attempts = 5): GRID {\n   while (attempts > 0) {\n      let row = getRandomIndex();\n      let col = getRandomIndex();\n\n      while(grid[row][col] === 0) {\n         row = getRandomIndex();\n         col = getRandomIndex();\n      }\n\n      const backup = grid[row][col];\n      grid[row][col] = 0;\n\n      // copy grid\n      const gridCopy = copyGrid(grid);\n\n      global.counter = 0;\n      solveGrid(gridCopy);\n\n      if(global.counter !== 1) {\n         grid[row][col] = backup;\n         attempts--;\n      }\n   }\n\n   return grid\n}","/**\n * Compares two arrays, (of any dimensions) and returns true if they aare equal, other returns false\n * @param arr1 first array to be compared\n * @param arr2 second array to be compared\n */\nexport default function compareArrays(arr1: any[], arr2: any[]): boolean {\n   if(!Array.isArray(arr1) && !Array.isArray(arr2)) return arr1 === arr2\n   if(arr1.length !== arr2.length) return false\n\n   for (let i = 0, len = arr1.length; i < len; i++)\n      if(!compareArrays(arr1[i], arr2[i])) return false;\n\n   return true;\n}","import { AnyAction } from \"redux\";\nimport { createFullGrid, removeNumbers, copyGrid, compareArrays } from \"utils\";\nimport { GRID } from \"typings\";\nimport { IReducer } from \"./interfaces\";\nimport * as types from \"./types\";\nimport { toast } from \"react-toastify\";\n\nconst initialState: IReducer = {};\n\nfunction reducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case types.CRETAE_GRID: {\n      const solvedGrid = createFullGrid();\n      const gridCopy = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(gridCopy);\n      const workingGrid = copyGrid(challengeGrid);\n\n      return {\n        ...state,\n        challengeGrid,\n        solvedGrid,\n        workingGrid,\n      };\n    }\n\n    case types.SELECT_BLOCK:\n      return { ...state, selectedBlock: action.coords };\n\n    case types.FILL_BLOCK: {\n      if (state.workingGrid && state.solvedGrid) {\n        if (\n          state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value\n        ) {\n          toast.error(\"Incorrect Number!\");\n          return state;\n        }\n        state.workingGrid[action.coords[0]][action.coords[1]] = action.value;\n\n        if (compareArrays(state.workingGrid, state.solvedGrid)) {\n          alert(\"Completed!\");\n        }\n        return { ...state, workingGrid: [...state.workingGrid] as GRID };\n      }\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import reducer from './reducer'\n\nexport * from './actions'\nexport * from './interfaces'\n\nexport type IReducer = ReturnType<typeof reducer>\nexport default reducer\n\n// interface 대신 ReturnType을 활용하여 중복을 제거한다.\n// ReturnType 을 대체 하는 예제 소스는 아래와 같다.\n/*\n   interface AddTodoAction {\n      /// 중복소스\n      type: typeof ADD_TODO,\n      payload: {\n      title: string\n      }\n      /// 중복소스\n   }\n\n   >> action\n   function addTodo(title: string): AddTodoAction {\n      return {\n         /// 중복소스\n         type: ADD_TODO,\n         payload: {\n            title\n         }\n         /// 중복소스\n      }\n   }\n\n   를 \n   type AddTodoAction = ReturnType<typeof addTodo>\n   로 변환.\n   actions에 정해져 있는 return 데이터를 그대로 ReturnType<typeof ...> 로 \n   사용하면 중복소스를 제거할 수 있다.\n*/\n\n","import styled, { css } from 'styled-components'\n\ninterface IProps {\n   active?: boolean\n   puzzle?: boolean\n}\n\nexport const Container = styled.div<IProps>`\n   ${({ theme, active, puzzle }) => css`\n      align-items: center;\n      background-color: ${active ? theme.colors.blue : theme.colors.white};\n      border: solid 1px ${theme.colors.black};\n      cursor: pointer;\n      display: flex;\n      flex-grow: 1;\n      flex-shrink: 0;\n      flex-basis: 0;\n      font-size: 20px;\n      font-weight: ${puzzle ? 'bold' : 'normal'};\n      height: auto;\n      justify-content: center;\n      transition: ${theme.transition};\n      user-select: none;\n\n      &:before {\n         padding-top: 100%;\n         content: '';\n         flaot: left;\n      }\n\n      &:hover {\n         background-color: ${theme.colors.lightBlue};\n      }\n   `}\n`;","import React, { FC } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Dispatch, AnyAction } from 'redux'\n\nimport { IReducer, select } from 'reducers'\nimport { INDEX, N } from 'typings'\nimport { Container } from './styles'\n\ninterface IProps {\n   colIndex: INDEX\n   rowIndex: INDEX\n}\n\ninterface IState {\n   value: N\n   isPuzzle: boolean\n   isActive: boolean\n}\n\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\n   /* \n      const result : any = useSelector(selector: Function, deps: any[]);\n      selector >> 기존에 사용했던 redux와 연결하기 위한 connect로 사용할 때 mapStateToProps와 비슷하다고 생각하면 된다.\n      deps >> 어떤 값이 바뀌었을 때 selector를 재정의 할 지 설정해 준다. deps를 생략하게 되면 매번 렌더링 될 때마다 selector 함수도 새로 정의된다.\n      selector 함수를 선언하는게 큰 리소스는 들어가진 않기 때문에 기본적으로 deps를 넣지 않아도 큰 문제는 없지만\n      그래도 최적화에 신경이 쓰인다면 deps 파라미터에 [] 를 기본적으로 쓰는 것도 나쁘지 않다.\n      그리고 실제 deps 배열에 넣어야 되는 값이 보인다면 더욱 좋다.\n      ex ) const counter = useSelector(state => state.counter, []);\n      ex ) const { a, b } = useSelector(state => ({ a: state.a, state.b }), [])\n   */\n   const state = useSelector<IReducer, IState>(({ challengeGrid, workingGrid, selectedBlock }) => ({ \n      isActive: selectedBlock \n         ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex \n         : false,\n      isPuzzle: challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 \n         ? true \n         : false,\n      value : workingGrid ? workingGrid[rowIndex][colIndex] : 0 \n   }))\n\n   const dispatch = useDispatch<Dispatch<AnyAction>>()\n\n   function handleClick() {\n      if(!state.isActive) {\n         dispatch(select([rowIndex, colIndex]));\n      }\n   }\n\n   return (\n      <Container \n         data-cy={`block-${rowIndex}-${colIndex}`} \n         onClick={handleClick} \n         active={state.isActive}\n         puzzle={state.isPuzzle}\n      >\n         {state.value === 0 ? '' : state.value}\n      </Container>\n   )\n}\n\nexport default Block\n","import styled, { css } from 'styled-components'\n\nexport const Container = styled.div`\n   display: flex;\n   flex-direction: column;\n   margin: 10px 0;\n`;\n\nexport const Row = styled.div`\n${({ theme }) => css`\n   display: flex;\n      flex-flow: row; \n\n      &:nth-child(1) {\n         div {\n            border-top: solid 4px ${theme.colors.black};\n         }\n      }\n      &:nth-child(3),\n      &:nth-child(6) {\n         div {\n            border-bottom: solid 3px ${theme.colors.black};\n         }\n      }\n      &:nth-child(9) {\n         border-bottom: solid 3px ${theme.colors.black};\n      }\n\n      div {\n         &:nth-child(1) {\n            border-left: solid 4px ${theme.colors.black};\n         }\n         &:nth-child(3),\n         &:nth-child(6),\n         &:nth-child(9) {\n            border-right: solid 4px ${theme.colors.black};\n         }\n         &:nth-child(4),\n         &:nth-child(7) {\n            border-left: none;\n         }\n      }\n   `}\n`;","import React, { FC, Children, useEffect, useCallback } from 'react'\nimport useMousetrap from 'react-hook-mousetrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dispatch, AnyAction } from 'redux'\n\nimport { BLOCK_COORDS, GRID, INDEX, N, NUMBERS } from 'typings'\n// createGrid, select 를 action.ts 에서 호출해와 action creator 생성 후\n// dispatch 를 이용하여 함수 사용\nimport { createGrid, IReducer, select, fillBlock } from 'reducers'\n\nimport Block from './block'\nimport { Container, Row } from './styles'\n\ninterface IState {\n   selectedBlock?: BLOCK_COORDS\n   selectedValue: N\n   solvedGrid?: GRID\n}\n\nconst Grid: FC = () => {\n   const state = useSelector<IReducer, IState>(({ selectedBlock, solvedGrid, workingGrid }) => ({ \n      selectedBlock,\n      selectedValue: workingGrid && selectedBlock ? \n         workingGrid[selectedBlock[0]][selectedBlock[1]]\n         : 0,\n      solvedGrid\n   }));\n   // dispatch >> 액션을 스토어에 전달하는 것을 의미한다.\n   const dispatch = useDispatch<Dispatch<AnyAction>>();\n   // react useCallback >> 모든 함수는 컴포넌트가 리렌더링 될 때마다 새로 만들어진다.\n   // 함수를 재 선언 하는 것은 메모리도, CPU도 리소스를 많이 차지하지는 않아 부하가 생길일은 없지만,\n   // 한번 만든 함수를 필요할 때만 새로 만들고 재사용하기 위해서 사용된다.\n   const create = useCallback(() => dispatch(createGrid()), [dispatch]);\n         \n   useEffect(() => {\n      if(!state.solvedGrid)\n      create();\n   }, [create, state.solvedGrid]);\n\n   const fill = useCallback(\n      (n: NUMBERS) => {\n         console.log(n)\n         if(state.selectedBlock && state.selectedValue === 0) {\n            dispatch(fillBlock(n, state.selectedBlock))\n         }\n      }\n      ,[dispatch, state.selectedBlock, state.selectedValue]\n   );\n\n   function moveDown() {\n      // 맨 밑칸의 박스는 아래로 이동 불가\n      if(state.selectedBlock && state.selectedBlock[0] < 8)\n      dispatch(select([state.selectedBlock[0] + 1 as INDEX, state.selectedBlock[1]]))\n   }\n\n   function moveLeft() {\n      if(state.selectedBlock && state.selectedBlock[1] > 0)\n      dispatch(select([state.selectedBlock[0], state.selectedBlock[1] - 1 as INDEX]))\n   }\n\n   function moveRight() {\n      if(state.selectedBlock && state.selectedBlock[1] < 8)\n      dispatch(select([state.selectedBlock[0], state.selectedBlock[1] + 1 as INDEX]))\n   }\n\n   function moveUp() {\n      if(state.selectedBlock && state.selectedBlock[0] > 0)\n      dispatch(select([state.selectedBlock[0] - 1 as INDEX, state.selectedBlock[1]]))\n   }\n\n   // 키보드 화살표 키 바인딩 이벤트\n   useMousetrap('1', () => fill(1))\n   useMousetrap('2', () => fill(2))\n   useMousetrap('3', () => fill(3))\n   useMousetrap('4', () => fill(4))\n   useMousetrap('5', () => fill(5))\n   useMousetrap('6', () => fill(6))\n   useMousetrap('7', () => fill(7))\n   useMousetrap('8', () => fill(8))\n   useMousetrap('9', () => fill(9))\n   \n   useMousetrap('down', moveDown);\n   useMousetrap('left', moveLeft);\n   useMousetrap('right', moveRight);\n   useMousetrap('up', moveUp);\n\n   return (\n      <Container data-cy=\"grid-container\">\n         {Children.toArray([...Array(9)].map((_, rowIndex) => (\n            <Row data-cy=\"grid-row-container\" key={rowIndex} >\n               {Children.toArray([...Array(9)].map((_, colIndex) => (\n                  <Block \n                     rowIndex={ rowIndex as INDEX } \n                     colIndex={ colIndex as INDEX }\n                  />\n               )))}\n            </Row>\n         )))}\n      </Container>\n   )\n}\n\nexport default Grid\n","import React, { FC, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction, Dispatch } from 'redux'\n\nimport { Button } from 'components'\nimport { BLOCK_COORDS, N, NUMBERS } from 'typings'\nimport { fillBlock, IReducer } from 'reducers'\n\ninterface IProps {\n   value: NUMBERS\n}\n\ninterface IState {\n   selectedBlock?: BLOCK_COORDS\n   selectedValue: N\n}\n\nconst NumberButton: FC<IProps> = ({ value }) => {\n\n   const state = useSelector<IReducer, IState>(\n      ({ selectedBlock, workingGrid }) => ({\n         selectedBlock,\n         selectedValue: workingGrid && selectedBlock  \n            ? workingGrid[selectedBlock[0]][selectedBlock[1]]\n            : 0\n      })\n   )\n   \n   const dispatch = useDispatch<Dispatch<AnyAction>>();\n\n   const fill = useCallback(() => {\n      if(state.selectedBlock && state.selectedValue === 0) {\n         dispatch(fillBlock(value, state.selectedBlock));\n      }\n   }, [dispatch, state.selectedBlock, state.selectedValue, value])\n\n   return (\n      <Button onClick={ fill }>{ value }</Button>\n   )\n}\n\nexport default NumberButton\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-flow: row;\n`","import React, { FC } from 'react'\n\nimport Button from './button'\nimport { NUMBERS } from 'typings'\nimport { Container } from './styles'\n\nconst Numbers: FC = () => {\n   return (\n      <Container>\n         {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map(value => (\n            <Button key={value} value={value} />\n         ))}\n      </Container>\n   )\n}\n\nexport default Numbers\n","import styled from 'styled-components'\n\nexport const Content = styled.div`\n   max-width: 500px;\n   display: flex;\n   flex: 1;\n   flex-direction: column;\n   justify-content: center;\n`;","import styled, { css } from 'styled-components'\n\nexport const Title = styled.h1`\n   ${({ theme }) => css`\n      color: ${theme.colors.white};\n      text-align: center;\n      margin-top: 0;\n   `}\n`;\n","import styled, { css } from 'styled-components'\n\nexport const Card = styled.div`\n   ${({ theme }) => css `\n      background-color: ${theme.colors.white};\n      border-radius: 15px;\n      flex: 1;\n      flex-direction: column;\n      max-height: fit-content;\n      padding: 15px;\n   `}\n`;","import styled, { css } from 'styled-components'\n\nexport const Button = styled.button`\n  ${({ theme }) => css`\n    align-items: center;\n    background-color: ${theme.colors.black};\n    border: 2px solid ${theme.colors.black};\n    border-radius: 4px;\n    color: ${theme.colors.white};\n    cursor: pointer;\n    display: flex;\n    flex: 1;\n    font-size: 16px;\n    font-weight: bold;\n    height: 40px;\n    justify-content: center;\n    margin: 4px 2px;\n    min-height: 40px;\n    opacity: 0.9;\n    padding: 0;\n    transition: ${theme.transition};\n    width: 100%;\n\n    &:focus {\n      border-color: ${theme.colors.blue};\n      outline: none;\n    }\n\n    &:hover {\n      opacity: 0.6;\n    }\n  `}\n`","import React,{ FC, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Action, Dispatch } from 'redux'\n\nimport { Button } from 'components'\nimport { createGrid } from 'reducers'\n\nconst NewButton: FC = () => {\n\n   const dispatch = useDispatch<Dispatch<Action>>()\n   const createNewGrid = useCallback(()=> {\n      if(window.confirm(\"Are you sure you wnat to start a new game?\")) {\n         dispatch(createGrid());\n      }\n   }, [dispatch])\n\n   return (\n      <Button onClick={createNewGrid}>New Game</Button>\n   )\n}\n\nexport default NewButton\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n     // [::1] is the IPv6 localhost address.\n     window.location.hostname === '[::1]' ||\n     // 127.0.0.0/8 are considered localhost for IPv4.\n     window.location.hostname.match(\n       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n     )\n );\n \n type Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void;\n   onUpdate?: (registration: ServiceWorkerRegistration) => void;\n };\n \n export function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n     // The URL constructor is available in all browsers that support SW.\n     const publicUrl = new URL(\n       process.env.PUBLIC_URL,\n       window.location.href\n     );\n     if (publicUrl.origin !== window.location.origin) {\n       // Our service worker won't work if PUBLIC_URL is on a different origin\n       // from what our page is served on. This might happen if a CDN is used to\n       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n       return;\n     }\n \n     window.addEventListener('load', () => {\n       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n \n       if (isLocalhost) {\n         // This is running on localhost. Let's check if a service worker still exists or not.\n         checkValidServiceWorker(swUrl, config);\n \n         // Add some additional logging to localhost, pointing developers to the\n         // service worker/PWA documentation.\n         navigator.serviceWorker.ready.then(() => {\n           console.log(\n             'This web app is being served cache-first by a service ' +\n               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n           );\n         });\n       } else {\n         // Is not localhost. Just register service worker\n         registerValidSW(swUrl, config);\n       }\n     });\n   }\n }\n \n function registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n     .register(swUrl)\n     .then(registration => {\n       registration.onupdatefound = () => {\n         const installingWorker = registration.installing;\n         if (installingWorker == null) {\n           return;\n         }\n         installingWorker.onstatechange = () => {\n           if (installingWorker.state === 'installed') {\n             if (navigator.serviceWorker.controller) {\n               // At this point, the updated precached content has been fetched,\n               // but the previous service worker will still serve the older\n               // content until all client tabs are closed.\n               console.log(\n                 'New content is available and will be used when all ' +\n                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n               );\n \n               // Execute callback\n               if (config && config.onUpdate) {\n                 config.onUpdate(registration);\n               }\n             } else {\n               // At this point, everything has been precached.\n               // It's the perfect time to display a\n               // \"Content is cached for offline use.\" message.\n               console.log('Content is cached for offline use.');\n \n               // Execute callback\n               if (config && config.onSuccess) {\n                 config.onSuccess(registration);\n               }\n             }\n           }\n         };\n       };\n     })\n     .catch(error => {\n       console.error('Error during service worker registration:', error);\n     });\n }\n \n function checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n     headers: { 'Service-Worker': 'script' }\n   })\n     .then(response => {\n       // Ensure service worker exists, and that we really are getting a JS file.\n       const contentType = response.headers.get('content-type');\n       if (\n         response.status === 404 ||\n         (contentType != null && contentType.indexOf('javascript') === -1)\n       ) {\n         // No service worker found. Probably a different app. Reload the page.\n         navigator.serviceWorker.ready.then(registration => {\n           registration.unregister().then(() => {\n             window.location.reload();\n           });\n         });\n       } else {\n         // Service worker found. Proceed as normal.\n         registerValidSW(swUrl, config);\n       }\n     })\n     .catch(() => {\n       console.log(\n         'No internet connection found. App is running in offline mode.'\n       );\n     });\n }\n \n export function unregister() {\n   if ('serviceWorker' in navigator) {\n     navigator.serviceWorker.ready.then(registration => {\n       registration.unregister();\n     });\n   }\n }","import { createStore } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport reducer from '../../reducers';\n\nconst persistConfig = {\n   key: 'root',\n   storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nfunction configureStore() {\n   const store = createStore(persistedReducer, devToolsEnhancer({}))\n   const persistor = persistStore(store);\n   \n   return { store, persistor };\n}\n\nexport default configureStore;","import { createGlobalStyle, css } from 'styled-components'\n\nexport default createGlobalStyle`\n   ${({ theme }) => css`\n      html {\n         height: 100%;\n         body {\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            margin: 0;\n\n            #root {\n               background: ${theme.colors.background};\n               color: ${theme.colors.black};\n               display: flex;\n               font-family: sans-serif;\n               height: 100%;\n               justify-content: center;\n               padding: 15px;\n            }\n         }\n      }\n   `}\n`;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Content, Title, Card, Grid, Numbers, NewButton } from \"./components\";\nimport { register, configureStore } from \"./core\";\nimport { GlobalStyles, theme } from \"./styles\";\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <GlobalStyles />\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Content data-cy=\"content\">\n          <Title data-cy=\"title\">Sudoku</Title>\n          <Card data-cy=\"card\">\n            <NewButton />\n            <Grid />\n            <Numbers />\n          </Card>\n        </Content>\n        <ToastContainer />\n      </PersistGate>\n    </Provider>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\nregister();\n","/* eslint-disable import/no-anonymous-default-export */\nexport default {\n   colors: {\n      background: 'radial-gradient(#282c34cc, #282c34)',\n      black: '#282c34',\n      blue: '#a0e9fd',\n      lightBlue : '#caf3fe',\n      white: 'white'\n   },\n   transition: '0.3s',\n}","export const CRETAE_GRID = \"CRETAE_GRID\"\nexport const SELECT_BLOCK = \"SELECT_BLOCK\"\nexport const FILL_BLOCK = \"FILL_BLOCK\""],"sourceRoot":""}